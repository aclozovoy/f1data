import pandas as pd
import requests
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime

# TIME FUNCTION
def time_convert(lapstring):
    try:
        # MS
        ms = int(lapstring[-3:])

        # SEC
        s = lapstring.split(':')[1]
        sec = int(s[0:2])

        # MIN
        min = int(lapstring.split(':')[0])

        time = 60 * min + sec + ms/1000

    except:
        time = None

    return time


# API FUNCTION
def f1_api_call(year, round):

    url = f'http://ergast.com/api/f1/{str(year)}/{str(round)}/qualifying.json'
    flag = 0

    # try:
    r = requests.get(url=url)
    # except:
    #     print(f'There is no record for round {str(round)} in {str(year)}')
    #     return
    data = r.json()

    df_race = pd.json_normalize(data['MRData']['RaceTable']['Races'][0]['Circuit'])

    df_race['season'] = data['MRData']['RaceTable']['Races'][0]['season']
    df_race['round'] = data['MRData']['RaceTable']['Races'][0]['round']
    df_race['url'] = data['MRData']['RaceTable']['Races'][0]['url']
    df_race['date'] = data['MRData']['RaceTable']['Races'][0]['date']
    df_race['time'] = data['MRData']['RaceTable']['Races'][0]['time']
    df_race['race name'] = data['MRData']['RaceTable']['Races'][0]['raceName']

    max_driver_num = pd.json_normalize(data['MRData']['RaceTable']['Races'][0]['QualifyingResults']).shape[0]
    driver_list = list(range(max_driver_num))

    for cur_driver in driver_list:
        # print(round,'   ',cur_driver)

        driver_data = pd.json_normalize(data['MRData']['RaceTable']['Races'][0]['QualifyingResults'][cur_driver])

        driver_data['year'] = year
        driver_data['round'] = round

        # CREATE DF ON FIRST ITERATION. CONCAT ON FOLLOWING ITERATIONS.
        if flag == 0:
            df_drivers = driver_data
            flag = 1
        else:
            df_drivers = pd.concat([df_drivers,driver_data], ignore_index=True)

    return df_race, df_drivers




start_year = 2003
end_year = datetime.now().year
year_list = list(range(start_year,end_year+1))
round_list = list(range(1,25))
flag = False

for year in year_list:
    for round in round_list:
        print(f'Year:{year}   Round:{round}')

        try:
            df_race, df_drivers = f1_api_call(year,round)
        except:
            print(f'Error for round {round} in year {year}.')
            continue

        ## CLEAN AND PROCESS DATA

        # CONVERT STRING TIME TO FLOAT
        df_drivers['Q1s'] = df_drivers['Q1'].apply(time_convert)

        try:
            df_drivers['Q2s'] = df_drivers['Q2'].apply(time_convert)
        except:
            print('No Q2 this race.')
            df_drivers['Q2s'] = 300            
        try:
            df_drivers['Q3s'] = df_drivers['Q3'].apply(time_convert)
        except:
            print('No Q3 this race.')
            df_drivers['Q3s'] = 300
        df_drivers['Qmin'] = 0.00

        for index, row in df_drivers.iterrows():
            min_time = np.nanmin([row['Q1s'],row['Q2s'],row['Q3s']])
            df_drivers.at[index,'Qmin'] = min_time

        fastest = df_drivers['Qmin'].min()
        df_drivers['percentage'] = df_drivers['Qmin'] / fastest * 100

        df_race['fastest'] = fastest

        # print(df_race)
        # print(df_drivers)

        ## INSERT RACE DATA INTO MAIN DATAFRAME
        if flag == True:
            df_race_full = pd.concat([df_race_full, df_race])
            df_drivers_full = pd.concat([df_drivers_full, df_drivers])
        else:
            df_race_full = df_race
            df_drivers_full = df_drivers
            flag = True


# OUTPUT TO CSV
df_race_full.to_csv('df_races.csv',sep='|')
df_drivers_full.to_csv('df_times.csv',sep='|')

# flag = 0

# year = 2014
# # round_list = range(1,17)
# round_list = list(range(1,25))
# # round_list.remove(9)
# # round_list.remove(4)
# # round_list = range(1,4)
# driver_list = range(20)







# # LOOP OVER ROUNDS (RACES)
# for round in round_list:

#     try:
#         # BUILD API URL
        


        


#     except:
#         print('There is no round '+str(round)+'.')



# # FIND TIME FROM LAST ROUND FOR EACH DRIVER
# for index, row in df.iterrows():
#     if row.loc['Q3_ms'] == row.loc['Q3_ms']:
#         df.at[index,'Qlast'] = row.loc['Q3_ms']
#     elif row.loc['Q2_ms'] == row.loc['Q2_ms']:
#         df.at[index,'Qlast'] = row.loc['Q2_ms']
#     else:
#         df.at[index,'Qlast'] = row.loc['Q1_ms']


# # LOOP OVER ROUNDS (RACES) TO FIND POLE TIMES AND TEAM AVERAGES
# teams = df['Constructor.name'].unique()

# for round in round_list:
#     # POLE TIMES
#     df_round = df[df['round'] == round]
#     pole = df_round['Qlast'].min()
#     for index, row in df.iterrows():
#         if row.loc['round'] == round:
#             df.at[index,'pole'] = pole

#     # FIND TEAM AVERAGE
#     for team in teams:
#         df_round_team = df_round[df_round['Constructor.name'] == team]
#         team_avg = df_round_team['Qlast'].mean()
#         team_min = df_round_team['Qlast'].min()
#         # if team_avg > 1.07*pole:
#         #     team_avg = df_round_team['Qlast'].min()
#         for index, row in df.iterrows():
#             if row.loc['round'] == round:
#                 if row.loc['Constructor.name'] == team:
#                     df.at[index,'Qteam_avg'] = team_avg
#                     df.at[index,'Qteam_min'] = team_min


# # DRIVER TIME OFF POLE
# df['driver time off pole'] = (df['Qlast'] - df['pole']) / 1000
# df['driver percentage off pole'] = (df['Qlast'] / df['pole'])

# # TEAM AVG TIME OFF POLE
# df['team avg time off pole'] = (df['Qteam_avg'] - df['pole']) / 1000
# df['team avg percentage off pole'] = (df['Qteam_avg'] / df['pole'])

# # TEAM AVG TIME OFF POLE
# df['team min time off pole'] = (df['Qteam_min'] - df['pole']) / 1000
# df['team min percentage off pole'] = (df['Qteam_min'] / df['pole'])

# # REMOVE 'GRAND PRIX' FOR AXIS LABEL
# df['country'] = df['racename'].str.replace(' Grand Prix','')


# # IMPROVEMENT THROUGH SESSIONS
# df['Q12delta'] = (df['Q2_ms'] - df['Q1_ms']) / 1000
# df['Q23delta'] = (df['Q3_ms'] - df['Q2_ms']) / 1000
# df_Q12delta = df.groupby(['Driver.code', 'Constructor.name'])['Q12delta'].agg('mean').reset_index()


# # ASSIGN 107% TAG TO REMOVE OUTLIERS
# # df['Under107'] = True
# # df['driver percentage off pole clean'] = df['driver percentage off pole']
# # for index, row in df.iterrows():
# #     if row.loc['driver percentage off pole'] > 1.07:
# #         df['Under107'] = False
# #         df['driver percentage off pole clean'] = None


# # df['driver percentage off pole'] = df['driver percentage off pole clean']


# # STD DEV
# df_agg = pd.DataFrame(columns=['std_dev', 'mean'])
# df_agg['std_dev'] = df.groupby(['country'])['driver percentage off pole'].agg('std')
# df_agg['mean'] = df.groupby(['country'])['driver percentage off pole'].agg('mean')
# print(df_agg)

# print(df)
# # print(df_Q12delta)

# team_colors = {'Red Bull':'#0600ef', 'Ferrari':'#dc0000', 'Alpine F1 Team':'#0090ff', 'Mercedes':'#00d2be', 'Alfa Romeo':'#900000', 'AlphaTauri':'#2b4562', 'Haas F1 Team':'#808080', 'McLaren':'#ff8700', 'Aston Martin':'#006f62', 'Williams':'#005aff','Renault':'#fff500','Racing Point':'#f596c8','Toro Rosso':'#469bff','Force India':'#ff80c7','Sauber':'#006eff','Caterham':'#005030', 'Lotus F1':'a28d00', 'Marussia':'#ed1b24'}

# def label_point(x, y, val, ax):
#     a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)
#     for i, point in a.iterrows():
#         ax.text(point['x']+.02, point['y'], str(point['val']))




# plt.figure()
# sns.set_style("dark")
# sns.scatterplot(data=df, x="country", y="driver percentage off pole", hue="Constructor.name", palette=team_colors)
# # sns.lineplot(data=df, x="country", y="team min percentage off pole", hue="Constructor.name", palette=team_colors, size = 0.5)

# # label_point(df_agg, df.sepal_width, df_iris.species, plt.gca())
# # for i in range(df.shape[0]):
#     # plt.text(x=df.G[i]+0.3,y=df.GA[i]+0.3,s=df.Driver.code[i], fontdict=dict(color=’red’,size=10),bbox=dict(facecolor=’yellow’,alpha=0.5))
# # plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)
# plt.ylim(0.995,1.1)
# plt.xticks(rotation=90)
# plt.title(str(year)+' Formula 1 Qualifying Times')
# plt.show()

# plt.figure()
# sns.scatterplot(data=df_agg, x="country", y="mean", color="b")
# plt.show()

# plt.figure()
# sns.scatterplot(data=df_agg, x="country", y="std_dev", color="g")
# plt.show()

# # plt.figure()
# # sns.barplot(data=df_Q12delta, x='Driver.code', y='Q12delta', hue="Constructor.name", palette=team_colors)#, width=0.8)
# # plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)
# # plt.show()




